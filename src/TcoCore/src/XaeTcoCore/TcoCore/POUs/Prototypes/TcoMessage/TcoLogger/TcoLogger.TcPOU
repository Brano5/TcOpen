<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="TcoLogger" Id="{5acf988a-efde-0bcd-168f-86c8fb40c218}" SpecialFunc="None">
    <Declaration><![CDATA[(*~
<docu>
	<summary>
			
			Usage as follows :
			<code>
				_logger
					.WithArgs().AddDecimal(1111).AddString('Inserted').Append()
					.Warning('My log %d message %s');
			</code>
			
			Inspired by Gerhard Barteling blogpost at https://www.plccoder.com/fluent-code/
	</summary>				
</docu>	
~*)	
FUNCTION_BLOCK FINAL TcoLogger IMPLEMENTS ITcoLogger

VAR
	_arguments				: TcoArguments(THIS^);	
	_Parent 				: ITcoObject;
	_contextIdentity 		: ULINT;		
	
	_logEvent				: LogEvent;

	_refConfig				: REFERENCE TO TcoLoggerConfiguration;	
	_defaultConfig			: TcoLoggerConfiguration;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Compose" Id="{b13d2647-feb8-066d-10af-e6730cf1fd00}">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Creates message of given category for this logger.				 
			</summary>				
		</docu>
~*)
METHOD PROTECTED Compose 
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(255);
	(*~
		<docu>
			<summary>
				Message level.			 
			</summary>			
		</docu>
	~*)
	Level : LogLevel;	
END_VAR

VAR
	_logEvent	: LogEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _arguments.IsEmpty THEN
	_arguments.Compose(ADR(Message));
END_IF

IF(_Parent <> 0 AND_THEN _Parent.Context <> 0 AND_THEN _Parent.Context.Rtc <> 0) THEN
	_logEvent.TimeStamp :=  _Parent.Context.Rtc.NowLocal();
	_logEvent.Text := Message;
	_logEvent.Identity := _Parent.Identity;
	_logEvent.LogLevel := Level;
	_logEvent.Cycle := _Parent.Context.StartCycleCount;
END_IF;

IF NOT THIS^.Enrich(_logEvent) THEN
	RETURN;
END_IF

THIS^.Dispatch(_logEvent);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Configure" Id="{db196f9a-173a-0b31-2f71-f3d81c9e47b7}">
      <Declaration><![CDATA[METHOD PUBLIC Configure : REFERENCE TO TcoLogger
VAR_INPUT
	Config		: REFERENCE TO TcoLoggerConfiguration;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __ISVALIDREF(Config) THEN
	_refConfig REF= Config;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Debug" Id="{161f9861-cbc5-079b-3518-3e1f3248b572}">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'debug' category to the message queue.				 
			</summary>		
		</docu>
~*)
METHOD Debug
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message	: STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Write(Message, LogLevel.Debug);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Dispatch" Id="{16b8dbe6-22ab-04a9-3dd9-ffbe17093489}">
      <Declaration><![CDATA[METHOD PROTECTED Dispatch : BOOL
VAR_INPUT
	LogEvent		: REFERENCE TO LogEvent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(_refConfig) OR NOT __ISVALIDREF(LogEvent) THEN
	RETURN;
END_IF

_refConfig.Sinks.ResetIterator();
WHILE _refConfig.Sinks.HasNext() DO
	_refConfig.Sinks.GetNext().Emit(LogEvent);
END_WHILE

Dispatch := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Enrich" Id="{d04efcef-b81a-05fb-2e03-c9911ab3b8b5}">
      <Declaration><![CDATA[METHOD PROTECTED Enrich : BOOL
VAR_INPUT
	LogEvent		: REFERENCE TO LogEvent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(_refConfig) OR NOT __ISVALIDREF(LogEvent) THEN
	RETURN;
END_IF

_refConfig.Enrichers.ResetIterator();
WHILE _refConfig.Enrichers.HasNext() DO
	_refConfig.Enrichers.GetNext().Enrich(LogEvent);
END_WHILE

Enrich := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Error" Id="{6d214bb4-37bc-026e-1dd0-1b261d65f009}">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'error' category to the message queue.				 
			</summary>						
		</docu>
~*)
METHOD Error
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message	: STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Write(Message, LogLevel.Error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Fatal" Id="{09077f0c-d871-0b98-1a27-b10d1530940c}">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'critical' category to the message queue.				 
			</summary>						
		</docu>
~*)
METHOD Fatal
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message	: STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Write(Message, LogLevel.Fatal);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{cdc80de1-ddaf-07c0-18b3-ba8b9da53e1a}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	Parent : ITcoObject;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Parent := Parent;
_contextIdentity := Parent.Identity;

IF NOT bInCopyCode THEN
	// e.g. register logger instance at a global logging provider 
	
	// Use default configuration until method "Configure" is called
	_defaultConfig
		.Clear()
		.MinimumLevel(LogLevel.Warning)
		.EnrichWith.Context()
		.WriteTo.XAE()
		.Build();
		
	_refConfig REF= _defaultConfig;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ForContext" Id="{7edb3696-2377-0055-02a2-a362b6e77d2e}">
      <Declaration><![CDATA[METHOD ForContext : ITcoLogger
VAR_INPUT
	Context	: ITcoContext;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ForContext := THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ForIdentity" Id="{d0b9635b-f99b-05ed-2557-440b5cabaa65}">
      <Declaration><![CDATA[METHOD ForIdentity : ITcoLogger
VAR_INPUT
	Identity	: ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_contextIdentity := Identity;
ForIdentity := THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Info" Id="{68f29db0-d9fd-04bb-116c-f6c0942a894c}">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'information' category to the message queue.				 
			</summary>			
		</docu>
~*)
METHOD Info
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message	: STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Write(Message, LogLevel.Info);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Warning" Id="{625804d1-cf83-08c2-22ab-fa71857d08e7}">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'warning' category to the message queue.				 
			</summary>					
		</docu>
~*)
METHOD Warning
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message	: STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Write(Message, LogLevel.Warning);]]></ST>
      </Implementation>
    </Method>
    <Method Name="WithArgs" Id="{63756482-f6df-0edf-067e-e5b95c87ceed}">
      <Declaration><![CDATA[METHOD WithArgs : ITcoArguments
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_arguments.Clear();
WithArgs := _arguments;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Write" Id="{97894695-d269-097d-0074-078b7df02fd1}">
      <Declaration><![CDATA[METHOD PROTECTED Write 
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(125);
	(*~
		<docu>
			<summary>
				Message log level.			 
			</summary>			
		</docu>
	~*)
	Level : LogLevel;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(_refConfig) THEN
	RETURN;
END_IF

IF(_Parent <> 0 AND_THEN _Parent.Context <> 0 AND_THEN _Parent.Context.Environment <> 0 AND_THEN _Parent.Context.Environment.Messaging <> 0) THEN
	IF(Level < _refConfig.Level
	  OR _Parent.Context.Environment.Messaging.IsSuspended) THEN
		RETURN;
	END_IF; 	
	
	_logEvent.PerCycleCount := _logEvent.PerCycleCount + 1;
	// Same cycle filter for most important messge.
	IF(_logEvent.Cycle = _Parent.Context.StartCycleCount) THEN		 	
		IF(Level > _logEvent.LogLevel) THEN	 
			Compose(Message, Level);
		END_IF;
	ELSE
	// Different cycle		
		_logEvent.PerCycleCount := 1;	
		Compose(Message, Level);		
	END_IF;	
END_IF;	]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>