@namespace TcoData
@using Vortex.Connector
<h3>DataView</h3>



<div class="container">
    <div class="row">

        <div class="mb-3 col">
            <label class="form-label">Per page</label>
            <select class="w-100 form-select"
                    @bind="@DataViewModel.Limit">
                <option class="form-control" value="5">5</option>
                <option class="form-control" value="10">10</option>
                <option class="form-control" value="20">20</option>
                <option class="form-control" value="30">30</option>
                <option class="form-control" value="50">50</option>
            </select>
        </div>
        <div class="mb-3 col">
            <label class="form-label">Filter</label>
            <input class="form-control col" type="text" @bind="@DataViewModel.FilterById" />
        </div>
        <div class="mb-3 col">
            <label class="form-label">Search mode</label>

            <select class="w-100 form-select"
                    @bind="@DataViewModel.SearchMode">
                @foreach (var item in eSearchModes)
                {

                    <option class="form-control" value="@item">@item.ToString() </option>

                }
            </select>
        </div>
        <button  class="btn btn-primary" @onclick="() => Filter() ">Filter</button>
    </div>
    <div class="row">
        @if (IsLoading)
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            <div class="col card m-1" style=" height: 500px !important; overflow: auto;">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Id</th>

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in DataViewModel.ObservableRecords.ToList())
                        {
                            <tr @onclick="@(() => RowClicked(item))">
                                <td>@item._EntityId</td>
                            </tr>
                        }


                    </tbody>
                </table>
             </div>

                <nav aria-label="Pagination">
                    <ul class="pagination justify-content-center">
                        <li class="page-item">
                            <button class="page-link" @onclick="() => PageChangedFirst()" aria-label="First">
                                <span aria-hidden="true">&laquo;</span>
                            </button>
                        </li>
                        <li class="page-item">
                            <button class="page-link" @onclick="() => PageChangedWithArrow(_currentActivePage-1)" aria-label="Previous">
                                <span aria-hidden="true">&lsaquo;</span>
                            </button>
                        </li>




                        @for (var i = _visibleDownPage; i < _visibleUpPage; i++)
                        {
                            var current = i;
                            @if (current == _currentActivePage)
                            {
                                <li class="page-item active"><button class="page-link" @onclick="() => PageChanged(current) ">@(current+1)</button></li>
                            }
                            else
                            {
                                <li class="page-item"><button class="page-link" @onclick="() => PageChanged(current) ">@(current+1)</button></li>
                            }
                        }

                        <li class="page-item">
                            <button class="page-link" @onclick="() => PageChangedWithArrow(_currentActivePage+1)" aria-label="Next">
                                <span aria-hidden="true">&rsaquo;</span>
                            </button>
                        </li>
                        <li class="page-item">
                            <button class="page-link" @onclick="() => PageChangedWithArrow(_currentActivePage-1)" aria-label="Last">
                                <span aria-hidden="true">&raquo;</span>
                            </button>
                        </li>

                    </ul>
                </nav>

                }
            </div>

            @if (_isRowSelected)
            {
                <p>@DataViewModel.SelectedRecord._EntityId</p>
                foreach (var item in DataViewModel.Changes)
                {
                    <p>@item.NewValue</p>
                }
                <RenderableContentControl Context="_data" Presentation="ShadowDisplay"></RenderableContentControl>
            }
        </div>


@code {



    [Parameter]
    public IDataViewModel DataViewModel { get; set; }

    private bool _isRowSelected { get; set; }
    //private IBrowsableDataObject _selectedItem { get; set; }

    private IVortexElement _data {get; set;}

    public bool IsLoading { get; set; }
    public int PageCount { get; set; }

    private int _currentActivePage { get; set; }

    private int _visibleDownPage { get; set; }
    private int _visibleUpPage { get; set; }

    //private string PaginationActive
    private async Task Filter()
    {
        DataViewModel.Page = 0;
        _visibleDownPage = 0;
        _currentActivePage = 0;
        await Task.Run(DataViewModel.FillObservableRecordsAsync);
        PageCount = (int)Math.Ceiling(DataViewModel.FilteredCount * 1.0 / DataViewModel.Limit * 1.0);
        _visibleUpPage = PageCount > 3 ? 3 : PageCount;
        StateHasChanged();
    }

    private void RowClicked(IBrowsableDataObject item)
    {
        DataViewModel.SelectedRecord = item;
        dynamic dataExchange = DataViewModel.DataExchange;
        _data = (IVortexElement)dataExchange._data;
        _isRowSelected = true;
        StateHasChanged();

    }

    private async Task PageChanged(int pageNumber)
    {

        if (pageNumber < 0 || pageNumber >= PageCount) return;

        _currentActivePage = pageNumber;
        DataViewModel.Page = pageNumber;

        await Task.Run(DataViewModel.FillObservableRecordsAsync);
        StateHasChanged();
    }

    private async Task PageChangedWithArrow(int pageNumber)
    {
        if (pageNumber < 0 || pageNumber >= PageCount) return;

        if (pageNumber < _visibleDownPage)
        {
            if (_visibleDownPage > 0)
            {
                _visibleDownPage -= 1;
                _visibleUpPage -= 1;
            }
        }
        if (pageNumber >= _visibleUpPage)
        {
            if (_visibleUpPage < PageCount)
            {
                _visibleUpPage += 1;
                _visibleDownPage += 1;
            }
        }

        await PageChanged(pageNumber);
    }


    private async Task PageChangedFirst()
    {

        _visibleDownPage = 0;
        if (PageCount > 3) _visibleUpPage = 3;
        await PageChanged(0);
    }
    private async Task PageChangedLast()
    {

        if(PageCount > 3) _visibleDownPage = PageCount-3;
        _visibleUpPage = PageCount;
        await PageChanged(PageCount-1);
    }




    protected override async Task OnInitializedAsync()
    {


        IsLoading = true;
        await Filter();
        IsLoading = false;


        base.OnInitializedAsync();
    }


    private IEnumerable<eSearchMode> eSearchModes => Enum.GetValues(typeof(eSearchMode)).Cast<eSearchMode>();


}
